@page "/Asignaciones"
@using Client.Interfaces
@inject IGradoService GradoService
@inject IAlumnosService AlumnoService
@inject IAsignaturaService AsignaturaService
@inject ISnackbar Snackbar

<h3>Asignar Alumno a Grado</h3>


<MudGrid>
    <MudItem xs="6">
        <MudSelect @bind-Value="_selectedAlumno" Dense="true" Label="Seleccion Alumno">
            @foreach (var alumno in _alumnos)
            {
                <MudSelectItem T="string" Value="@alumno.Id.ToString()">@alumno.Nombre @alumno.Apellidos</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudSelect @bind-Value="_selectedGrado" Dense="true" Label="Seleccion Grado">
            @foreach (var grado in _grados)
            {
                <MudSelectItem T="string" Value="@grado.Id.ToString()">@grado.Nombre @grado.Seccion</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AssignAlumno">Asignar Alumno</MudButton>
    </MudItem>
    <MudItem xs="6">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UnAssignAlumno">Remover Alumno</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudDataGrid T="Alumno"
                         Items="@_alumnos"
                         Loading="@_loading"
                         EditMode="DataGridEditMode.Form"
                         Bordered="true"
                         Dense="true"
                         EditTrigger="@(DataGridEditTrigger.Manual)"
                         ReadOnly="true">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Editable="false" Title="Id"/>
                    <PropertyColumn Property="x => x.Nombre" Title="Nombre"/>
                    <PropertyColumn Property="x => x.Apellidos" Title="Apellidos"/>
                    <TemplateColumn Title="Grado">
                        <CellTemplate>
                            @if (context.Item.Grados.Count > 0)
                            {
                                @context.Item.Grados.FirstOrDefault().Nombre
                            }
                        </CellTemplate>
                    </TemplateColumn>
                   
                </Columns>
            </MudDataGrid>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    private List<Alumno> _alumnos = [];
    private List<Grado> _grados = [];
    private string _selectedAlumno { get; set; } = "Seleccione Alumno";
    private string _selectedGrado { get; set; } = "Seleccione Grado";
    private bool _loading = true;
    private readonly List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        var allAlumnosAsync = await AlumnoService.GetAllAlumnosAsync();
        _alumnos = allAlumnosAsync.Data;

        if (_alumnos.Count > 0)
        {
            Snackbar.Add("Alumnos Cargados");
        }
        else
        {
            Snackbar.Add("No hay alumnos", Severity.Error);
        }

        var allGradosAsync = await GradoService.GetAllGradosAsync();
        _grados = allGradosAsync.Data;


        if (_grados.Count > 0)
        {
            Snackbar.Add("Grados Cargados");
        }
        else
        {
            Snackbar.Add("Grados No cargados", Severity.Error);
        }

        _loading = false;
    }


    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count}";
    }

    async void AssignAlumno()
    {
        try
        {
            var request = await AsignaturaService.AssignAlumno(int.Parse(_selectedAlumno), int.Parse(_selectedGrado));
            var assigned = request.Data;
            if (request.Success)
            {
                var allAlumnosAsync = await AlumnoService.GetAllAlumnosAsync();
                _alumnos = allAlumnosAsync.Data;
                Snackbar.Add("Asignación reallizada con éxito");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(request.Message, Severity.Error);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    async void UnAssignAlumno()
    {
        try
        {
            var request = await AsignaturaService.UnAssignAlumno(int.Parse(_selectedAlumno), int.Parse(_selectedGrado));
            var assigned = request.Data;
            if (request.Success)
            {
                var allAlumnosAsync = await AlumnoService.GetAllAlumnosAsync();
                _alumnos = allAlumnosAsync.Data;
                Snackbar.Add("Alumno Eliminado de curso con éxito");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(request.Message, Severity.Error);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}