@page "/Alumnos"
@using System.Text.Json
@using Client.Interfaces
@using Shared
@inject IDialogService DialogService
@inject IAlumnosService Service
@inject ISnackbar Snackbar

<h3>Alumnos</h3>

@if (_alumnos.Count == 0)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudGrid>
        @* <MudItem xs="12" Class="d-flex justify-end"> *@
        @*     <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AdAlumno">Agregar Alumno</MudButton> *@
        @* </MudItem> *@
        <MudItem>
            <MudDataGrid T="Alumno"
                         Items="@_alumnos"
                         Loading="@_loading"
                         EditMode="DataGridEditMode.Form"
                         StartedEditingItem="@StartedEditingItem"
                         CanceledEditingItem="@CanceledEditingItem"
                         CommittedItemChanges="@CommittedItemChanges"
                         Bordered="true"
                         Dense="true"
                         EditTrigger="@(DataGridEditTrigger.Manual)"
                         ReadOnly="false">
                         <Columns>
                             <PropertyColumn Property="x => x.Id" IsEditable="false" Title="Id"/>
                             <PropertyColumn Property="x => x.Nombre" Title="Nombre"/>
                             <PropertyColumn Property="x => x.Apellidos" Title="Apellidos"/>
                             <PropertyColumn Property="x => x.FechaDeNacimiento" Title="Fecha De Nacimiento"/>
                         </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
}

@code {
    private List<Alumno> _alumnos = [];
    private bool _loading = true;
    private readonly List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Service.GetAllAlumnosAsync();
        _alumnos = response.Data;
        
        if (_alumnos.Count > 0)
        {
            Snackbar.Add("Alumnos Cargadas");
        }
        else
        {
            Snackbar.Add("Hubo un error", Severity.Error);
        }

        _loading = false;
    }
    
    void StartedEditingItem(Alumno item)
    {
        Console.WriteLine("Editing");
        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Alumno item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    async void CommittedItemChanges(Alumno item)
    {
        var response = await Service.UpdateAlumnoAsync(item);

        if (response != null)
        {
            Snackbar.Add("Alumno Editado", Severity.Success);
        }
        else
        {
            Snackbar.Add("No se pudo editar el Alumno", Severity.Error);
        }

        _loading = false;
    }

    async void AddHome()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AgregarAlumno>("Agregar Alumno", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await Service.GetAllAlumnosAsync();
            _alumnos = response.Data;
        }

        StateHasChanged();
    }

    async void DeleteDialog(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<BorrarAlumno> { { x => x.Id, id } };
        var dialog = await DialogService.ShowAsync<BorrarAlumno>("Borrar Alumno", parameters, options);
        var result = await dialog.Result;
        if (result.Canceled) return;
        var response = await Service.GetAllAlumnosAsync();
        _alumnos = response.Data;
        StateHasChanged();
    }

    // async void PageChanged(int page)
    // {
    //     var response = await Service.GetAllHomes(null, page * 10);
    //     _houses = response.Item1;
    //     StateHasChanged();
    // }
}