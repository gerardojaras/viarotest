@page "/Alumnos"
@using System.Text.Json
@using Client.Components
@using Client.Interfaces
@inject IDialogService DialogService
@inject IAlumnosService Service
@inject ISnackbar Snackbar

<h3>Alumnos</h3>


    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddAlumno">Agregar Alumno</MudButton>
        </MudItem>
        <MudItem>
            <MudDataGrid T="Alumno"
                         Items="@_alumnos"
                         Loading="@_loading"
                         EditMode="DataGridEditMode.Form"
                         StartedEditingItem="@StartedEditingItem"
                         CanceledEditingItem="@CanceledEditingItem"
                         CommittedItemChanges="@CommittedItemChanges"
                         Bordered="true"
                         Dense="true"
                         EditTrigger="@(DataGridEditTrigger.Manual)"
                         ReadOnly="false">
                         <Columns>
                             <PropertyColumn Property="x => x.Id" Editable="false" Title="Id"/>
                             <PropertyColumn Property="x => x.Nombre" Title="Nombre"/>
                             <PropertyColumn Property="x => x.Apellidos" Title="Apellidos"/>
                             <PropertyColumn Property="x => x.FechaDeNacimiento" Title="Fecha De Nacimiento"/>
                             @* <PropertyColumn Property="x => x.Genero" Title="Gender" Hidden="true"/> *@
                             <PropertyColumn Property="x => x.Genero" Hidden="true">
                                 <EditTemplate>
                                     <MudSelect @bind-Value="context.Item.Genero" Margin="@Margin.Dense">
                                         <MudSelectItem Value="1">Masculino</MudSelectItem>
                                         <MudSelectItem Value="2">Femenino</MudSelectItem>
                                     </MudSelect>
                                 </EditTemplate>
                             </PropertyColumn>
                             
                             <TemplateColumn Title="Genero">
                                 <CellTemplate>
                                     @if (context.Item.Genero == 1)
                                     {
                                         <MudButton Variant="Variant.Text">Masculino</MudButton>
                                     }
                                     else
                                     {
                                         <MudButton Variant="Variant.Text">Femenino</MudButton>
                                     }
                                 </CellTemplate>
                             </TemplateColumn>
                             <TemplateColumn Title="Acciones">
                                 <CellTemplate>
                                     <MudStack Row="true">
                                         <MudIconButton
                                             Icon="@Icons.Material.Filled.Edit"
                                             aria-level="Edit"
                                             OnClick="@context.Actions.StartEditingItemAsync"/>
                                         <MudIconButton
                                             Icon="@Icons.Material.Filled.Delete"
                                             aria-level="Delete"
                                             OnClick="@(() => DeleteDialog(context.Item.Id))"/>
                                     </MudStack>
                                 </CellTemplate>
                             </TemplateColumn>
                         </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>


@code {
    private List<Alumno> _alumnos = [];
    private bool _loading = true;
    private readonly List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Service.GetAllAlumnosAsync();
        _alumnos = response.Data;
        
        if (_alumnos.Count > 0)
        {
            Snackbar.Add("Alumnos Cargados");
        }
        else
        {
            Snackbar.Add("No hay alumnos", Severity.Error);
        }

        _loading = false;
    }
    
    void StartedEditingItem(Alumno item)
    {
        Console.WriteLine("Editing");
        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Alumno item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    async void CommittedItemChanges(Alumno item)
    {
        var response = await Service.UpdateAlumnoAsync(item);

        if (response != null)
        {
            Snackbar.Add("Alumno Editado", Severity.Success);
        }
        else
        {
            Snackbar.Add("No se pudo editar el Alumno", Severity.Error);
        }

        _loading = false;
    }

    async void AddAlumno()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AgregarAlumno>("Agregar Alumno", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await Service.GetAllAlumnosAsync();
            _alumnos = response.Data;
        }

        StateHasChanged();
    }

    async void DeleteDialog(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<BorrarAlumno> { { x => x.Id, id } };
        var dialog = await DialogService.ShowAsync<BorrarAlumno>("Borrar Alumno", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await Service.GetAllAlumnosAsync();
            _alumnos = response.Data;
            StateHasChanged();
        }
        
    }

    // async void PageChanged(int page)
    // {
    //     var response = await Service.GetAllHomes(null, page * 10);
    //     _houses = response.Item1;
    //     StateHasChanged();
    // }
}